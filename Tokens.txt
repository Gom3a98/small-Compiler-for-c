<INT> int
<ID> func
<LEFT_BRACKETS> (
<FLOAT> float
<ID> x
<COMMA> ,
<INT> int
<ID> y
<COMMA> ,
<BOOLEAN> bool
<ID> z
<COMMA> ,
<INT> int
<ID> arr
<LEFT_SQUARE_B> [
<RIGHT_SQUARE_B> ]
<RIGHT_BRACKETS> )
<LEFT_BRACKETS_PARTH> {
<IF> if
<LEFT_BRACKETS> (
<ID> arr
<LEFT_SQUARE_B> [
<ID> x
<RIGHT_SQUARE_B> ]
<GREATERTHAN> >
<INTEGRAL_LITERAL> 10
<AND> &&
<ID> y
<GREAT_EQ> >=
<INTEGRAL_LITERAL> 20
<RIGHT_BRACKETS> )
<LEFT_BRACKETS_PARTH> {
<ID> value
<ASSIGN_OPERATOR> =
<INTEGRAL_LITERAL> 10
<ASTERICK> *
<ID> value
<PLUS> +
<INTEGRAL_LITERAL> 10
<ASTERICK> *
<INTEGRAL_LITERAL> 90
<PLUS> +
<ID> sa
<MINUS> -
<ID> ww
<SEMI-COLON> ;
<RIGHT_BRACKETS_PARTH> }
<WHILE> while
<LEFT_BRACKETS> (
<ID> s
<GREATERTHAN> >
<INTEGRAL_LITERAL> 10
<RIGHT_BRACKETS> )
<LEFT_BRACKETS_PARTH> {
<ID> printf
<LEFT_BRACKETS> (
<ID> s
<RIGHT_BRACKETS> )
<SEMI-COLON> ;
<ID> s
<ASSIGN_OPERATOR> =
<ID> s
<MINUS> -
<INTEGRAL_LITERAL> 1
<SEMI-COLON> ;
<RIGHT_BRACKETS_PARTH> }
<RIGHT_BRACKETS_PARTH> }
<INT> int
<ID> r
<SEMI-COLON> ;
<INT> int
<ID> main
<LEFT_BRACKETS> (
<VOID> void
<RIGHT_BRACKETS> )
<LEFT_BRACKETS_PARTH> {
<FLOAT> float
<ID> x
<SEMI-COLON> ;
<INT> int
<ID> y
<SEMI-COLON> ;
<BOOLEAN> bool
<ID> z
<SEMI-COLON> ;
<SINGLE_COMMENT> //its Comment
<ID> arr
<LEFT_SQUARE_B> [
<RIGHT_SQUARE_B> ]
<ASSIGN_OPERATOR> =
<NEW> new
<INT> int
<LEFT_SQUARE_B> [
<INTEGRAL_LITERAL> 10
<RIGHT_SQUARE_B> ]
<SEMI-COLON> ;
<ID> func
<LEFT_BRACKETS> (
<ID> x
<COMMA> ,
<ID> y
<COMMA> ,
<ID> z
<COMMA> ,
<ID> arr
<RIGHT_BRACKETS> )
<SEMI-COLON> ;
<RIGHT_BRACKETS_PARTH> }
